; vim:ts=8:
	; Jam-1 archdef
opcode	irc.programprologue			: .extern Math_Multiply_16_16
opcode	irc.programepilogue			: 
opcode	irc.global				: .global
opcode	irc.segment			#1	: .segment #1
opcode	v.compilernop.relative.void		: cnop
opcode	v.nop.relative.void			: nop
opcode	v.extern.relative.void		#1	: .extern #1
opcode	v.global.relative.void			: .global
opcode	v.enter.relative.void		#1	: push	ra		\
						| push	si		\
						| mov	si,	sp 	\
						| mov	c,	0	\
						| .times #1 push c	
opcode	v.call_abs.relative.nearptr	#1	: call #1
opcode	v.const.relative.void		#1	: 
opcode	v.const.relative.int8		#1	: mov a, #1
opcode	v.const.relative.uint8		#1	: mov a, #1
opcode	v.const.relative.int16		#1	: mov ab, #1
opcode	v.const.relative.uint16		#1	: mov ab, #1
opcode	v.const.relative.nearptr	#1	: mov ab, #1
opcode	v.prereturn.relative.void		: 
opcode	v.prereturn.relative.int8		: 
opcode	v.prereturn.relative.uint8		: 
opcode	v.prereturn.relative.int16		: 
opcode	v.prereturn.relative.uint16		: 
opcode	v.prereturn.relative.nearptr		: 
opcode	v.leave.relative.void			: mov tx, si | mov sp, tx | nop | pop si
opcode	v.return.relative.void			: pop ra | ret
opcode	v.return.relative.int8			: pop ra | ret
opcode	v.return.relative.uint8			: pop ra | ret
opcode	v.return.relative.int16			: pop ra | ret
opcode	v.return.relative.uint16		: pop ra | ret
opcode	v.return.relative.nearptr		: pop ra | ret
opcode	v.return.relative.void		#1	: pop ra | .times #1 pop c | ret
opcode	v.return.relative.int8		#1	: pop ra | .times #1 pop c | ret
opcode	v.return.relative.uint8		#1	: pop ra | .times #1 pop c | ret
opcode	v.return.relative.int16		#1	: pop ra | .times #1 pop c | ret
opcode	v.return.relative.uint16	#1	: pop ra | .times #1 pop c | ret
opcode	v.return.relative.nearptr	#1	: pop ra | .times #1 pop c | ret
opcode	v.indexfp.relative.nearptr		: mov	tx,	si	\
						| mov	c,	tl	\
						| mov	d,	th	\
						| add	a,	c	\
						| adc	b,	d	
opcode	v.pha.relative.nearptr			: push b | push a
opcode	v.plb.relative.nearptr			: mov c, a | mov d, b | pop a | pop b
opcode	v.pha.relative.uint16			: push b | push a
opcode	v.plb.relative.uint16			: mov c, a | mov d, b | pop a | pop b
opcode	v.pha.relative.int16			: push b | push a
opcode	v.plb.relative.int16			: mov c, a | mov d, b | pop a | pop b
opcode	v.pha.relative.int8			: push a
opcode	v.plb.relative.int8			: mov c, a | mov d, b | pop a
opcode	v.pha.relative.uint8			: push a
opcode	v.plb.relative.uint8			: mov c, a | mov d, b | pop a
opcode	v.st.data.nearptr			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	d	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.st.data.uint16			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	d	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.st.data.int16				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	d	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.st.data.int8				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	\
						| mov	a,	c
opcode	v.st.data.uint8				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	\
						| mov	a,	c
opcode	v.jmp.relative.void	#1		: jmp	#1
opcode	v.ld.data.int8				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| mov	a,	c
opcode	v.ld.data.uint8				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| mov	a,	c
opcode	v.ld.data.uint16			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.ld.data.int16				: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.ld.data.nearptr			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| mov	a,	c	\
						| mov	b,	d
opcode	v.cast.void.int8			: mov a, 0
opcode	v.cast.void.uint8			: mov a, 0
opcode	v.cast.uint8.int16			: mov b, 0
opcode	v.cast.uint8.uint16			: mov b, 0
opcode	v.cast.uint8.nearptr			: mov b, 0
opcode	v.cast.nearptr.uint8			: mov b, 0 ; . Nothing needed here
opcode	v.cast.int16.uint8			: mov b, 0 ; ' but to be sure
opcode	v.cast.uint16.uint8			: mov b, 0 ; 
opcode	v.drop.relative.void			: ; 
opcode	v.drop.relative.int8			: ; For Jam-1 current IR 
opcode	v.drop.relative.uint8			: ; Compiler archdef I don't 
opcode	v.drop.relative.int16			: ; care about *any* drops
opcode	v.drop.relative.uint16			: ; whatsoever.
opcode	v.drop.relative.nearptr			: ;
opcode	v.inc_rmw.data.int8			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| nop			\
						| inc	c		\
						| nop			\
						| mov	[tx],	c	
opcode	v.inc_rmw.data.uint8			: mov	tl,	a	\
						| mov	th,	b	\
						| nop			\
						| mov	c,	[tx]	\
						| nop			\
						| inc	c		\
						| nop			\
						| mov	[tx],	c	
opcode	v.inc_rmw.data.uint16			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| inc	c		\
						| incc	d		\
						| mov	[tx],	d	\
						| dec	a		\
						| incc	b		\
						| dec	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	
opcode	v.inc_rmw.data.int16			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| inc	c		\
						| incc	d		\
						| mov	[tx],	d	\
						| dec	a		\
						| incc	b		\
						| dec	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	
opcode	v.inc_rmw.data.nearptr			: mov	tl,	a	\
						| mov	th,	b	\
						| mov	c,	[tx]	\
						| inc	a		\
						| incc	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	d,	[tx]	\
						| inc	c		\
						| incc	d		\
						| mov	[tx],	d	\
						| dec	a		\
						| incc	b		\
						| dec	b		\
						| mov	tl,	a	\
						| mov	th,	b	\
						| mov	[tx],	c	
opcode	v.preinc.data.uint8			: mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	a,	[tx]	\
                                                | inc	a		\
                                                | mov	[tx],	a	\
                                                | mov	b,	0	
opcode	v.preinc.data.int16			: mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	c,	[tx]	\
                                                | inc	a		\
                                                | incc	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	d,	[tx]	\
                                                | inc	c		\
                                                | incc	d		\
                                                | mov	[tx],	d	\
                                                | dec	a		\
                                                | incc	b		\
                                                | dec	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	[tx],	c	\
                                                | mov	a,	c	\
                                                | mov	b,	d	
opcode	v.preinc.data.uint16			: mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	c,	[tx]	\
                                                | inc	a		\
                                                | incc	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	d,	[tx]	\
                                                | inc	c		\
                                                | incc	d		\
                                                | mov	[tx],	d	\
                                                | dec	a		\
                                                | incc	b		\
                                                | dec	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	[tx],	c	\
                                                | mov	a,	c	\
                                                | mov	b,	d	
opcode	v.preinc.data.nearptr			: mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	c,	[tx]	\
                                                | inc	a		\
                                                | incc	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	d,	[tx]	\
                                                | inc	c		\
                                                | incc	d		\
                                                | mov	[tx],	d	\
                                                | dec	a		\
                                                | incc	b		\
                                                | dec	b		\
                                                | mov	tl,	a	\
                                                | mov	th,	b	\
                                                | mov	[tx],	c	\
                                                | mov	a,	c	\
                                                | mov	b,	d	
opcode	v.cjae.relative.uint16	#1		: sub a, c | sbb b, d | jae #1
opcode	v.cjbe.relative.uint16	#1		: sub a, c | sbb b, d | jb #1 | or a, b | je #1
opcode	v.cjb.relative.uint8	#1		: cmp a, c | jb #1
opcode	v.cjb.relative.uint16	#1		: sub a, c | sbb b, d | jb #1
opcode	v.cjb.relative.nearptr	#1		: sub a, c | sbb b, d | jb #1
opcode	v.cjl.relative.int16	#1		: sub a, c | sbb b, d | jl #1
opcode	v.cjl.relative.nearptr	#1		: sub a, c | sbb b, d | jl #1
opcode	v.cjge.relative.int16	#1		: sub a, c | sbb b, d | jge #1
opcode	v.cje.relative.int16	#1		: sub a, c | sbb b, d | or a, b | je #1
opcode	v.cje.relative.uint16	#1		: sub a, c | sbb b, d | or a, b | je #1
opcode	v.cje.relative.nearptr	#1		: sub a, c | sbb b, d | or a, b | je #1
opcode	v.cjne.relative.int16	#1		: sub a, c | sbb b, d | or a, b | jne #1
opcode	v.cjne.relative.uint16	#1		: sub a, c | sbb b, d | or a, b | jne #1
opcode	v.cjne.relative.nearptr	#1		: sub a, c | sbb b, d | or a, b | jne #1
opcode	v.cje.relative.int8	#1		: cmp a, c | je #1
opcode	v.cje.relative.uint8	#1		: cmp a, c | je #1
opcode	v.cjne.relative.int8	#1		: cmp a, c | jne #1
opcode	v.cjne.relative.uint8	#1		: cmp a, c | jne #1
opcode	v.tjnz.relative.int8	#1		: test a  | jnz #1
opcode	v.tjnz.relative.uint8	#1		: test a  | jnz #1
opcode	v.tjnz.relative.int16	#1		: or a, b | jnz #1
opcode	v.tjnz.relative.uint16	#1		: or a, b | jnz #1
opcode	v.tjnz.relative.nearptr	#1		: or a, b | jnz #1
opcode	v.tjz.relative.int8	#1		: test a  | jz #1
opcode	v.tjz.relative.uint8	#1		: test a  | jz #1
opcode	v.tjz.relative.int16	#1		: or a, b | jz #1
opcode	v.tjz.relative.uint16	#1		: or a, b | jz #1
opcode	v.tjz.relative.nearptr	#1		: or a, b | jz #1
opcode	v.lea.relative.nearptr	#1		: mov ab, #1
opcode	v.r2.relative.uint8	#1		: .times #1 db 0 ; rb 1
opcode	v.r.relative.int8			: db 0 ; rb 1
opcode	v.r.relative.uint8			: db 0 ; rb 1
opcode	v.r.relative.int16			: dw 0 ; rw 1
opcode	v.r.relative.uint16			: dw 0 ; rw 1
opcode	v.r.relative.nearptr			: dw 0 ; rw 1
opcode	v.d.relative.int8	#1		: db #1
opcode	v.d.relative.uint8	#1		: db #1
opcode	v.d.relative.int16	#1		: dw #1
opcode	v.d.relative.uint16	#1		: dw #1
opcode	v.d.relative.nearptr	#1		: dw #1
opcode	v.push.relative.void			: 
opcode	v.push.relative.nearptr			: push b | push a
opcode	v.push.relative.int16			: push b | push a
opcode	v.push.relative.uint16			: push b | push a
opcode	v.push.relative.int8			: push a
opcode	v.push.relative.uint8			: push a
opcode	v.call.relative.nearptr			: mov tl, a | mov th, b | nop | call tx
opcode	v.add.relative.int8			: add a, c
opcode	v.add.relative.uint8			: add a, c
opcode	v.add.relative.int16			: add a, c | adc b, d
opcode	v.add.relative.uint16			: add a, c | adc b, d
opcode	v.add.relative.nearptr			: add a, c | adc b, d
opcode	v.sub.relative.int8			: sub a, c
opcode	v.sub.relative.uint8			: sub a, c
opcode	v.sub.relative.int16			: sub a, c | sbb b, d
opcode	v.sub.relative.uint16			: sub a, c | sbb b, d
opcode	v.sub.relative.nearptr			: sub a, c | sbb b, d
opcode	v.constantshl.relative.int8	#1	: .times #1 sal a
opcode	v.constantshl.relative.uint8	#1	: .times #1 sal a
opcode	v.constantshl.relative.int16	#1	: .times #1 sal ab
opcode	v.constantshl.relative.uint16	#1	: .times #1 sal ab
opcode	v.constantshr.relative.int8	#1	: .times #1 sar a
opcode	v.constantshr.relative.int16	#1	: .times #1 sar ab
opcode	v.constantshr.relative.uint8	#1	: .times #1 slr a
opcode	v.constantshr.relative.uint16	#1	: .times #1 slr ab
opcode	v.mul.relative.uint16			: call Math_Multiply_16_16
opcode	v.mul.relative.nearptr			: call Math_Multiply_16_16
opcode	v.negate.relative.int16			: mov c, 255 | xor a, c | xor b, c | inc a | incc b
opcode	v.index.relative.nearptr	#1	: mov cd, #1 | add a, c | adc b, d
opcode	v.cje_const.relative.int16	#2, #1	: mov cd, #1 | sub cd, ab | or c, d | jz #2
opcode	v.cje_const.relative.uint16	#2, #1	: mov cd, #1 | sub cd, ab | or c, d | jz #2
opcode	v.cje_const.relative.nearptr	#2, #1	: mov cd, #1 | sub cd, ab | or c, d | jz #2
opcode	v.cje_const.relative.int8	#2, #1	: mov c, #1 | cmp a, c | jz #2
opcode	v.cje_const.relative.uint8	#2, #1	: mov c, #1 | cmp a, c | jz #2
opcode	v.and.relative.int8			: and a, c
opcode	v.and.relative.uint8			: and a, c
opcode	v.and.relative.int16			: and a, c | and b, d
opcode	v.and.relative.uint16			: and a, c | and b, d
opcode	v.and.relative.nearptr			: and a, c | and b, d
opcode	v.or.relative.int8			: or a, c
opcode	v.or.relative.uint8			: or a, c
opcode	v.or.relative.int16			: or a, c | or b, d
opcode	v.or.relative.uint16			: or a, c | or b, d
opcode	v.or.relative.nearptr			: or a, c | or b, d
opcode	v.xor.relative.int8			: xor a, c
opcode	v.xor.relative.uint8			: xor a, c
opcode	v.xor.relative.int16			: xor a, c | xor b, d
opcode	v.xor.relative.uint16			: xor a, c | xor b, d
opcode	v.xor.relative.nearptr			: xor a, c | xor b, d
